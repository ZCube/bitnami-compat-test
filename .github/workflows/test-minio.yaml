name: Chart Testing
on:
  push:
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: [self-hosted, linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: uninstall qemu
        run: |
          docker run --privileged --rm tonistiigi/binfmt --uninstall all

      - name: clone bitnami charts
        run: |
          git clone --depth=1 https://github.com/bitnami/charts

      - name: install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          
          helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/$(dpkg --print-architecture)/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: install yq
        run: |
          export VERSION=v4.30.5
          export BINARY=yq_linux_$(dpkg --print-architecture)
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz
          mv ${BINARY} /usr/local/bin/yq

      - name: install jq, binfmt-support
        run: |
          sudo apt update
          sudo apt install -y jq binfmt-support

      - name: install goss
        run: |
          export GOSS_VER=v0.3.20
          curl -fsSL https://goss.rocks/install | GOSS_DST=/usr/local/bin sh

      - name: install k3d
        run: |
          wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.6 bash

      - name: prepare k3s cluster by k3d
        run: |
          k3d cluster stop test-cluster || true
          k3d cluster delete test-cluster || true
          k3d cluster create test-cluster \
          -v /usr/local/bin/goss:/bin/goss:ro \
          -v ${PWD}/charts/.vib:/goss_data \
          -p "80:80@agent:0:direct" \
          -p "443:443@agent:0:direct" \
          -p "8053:53/udp@agent:0:direct" \
          --agents 3 \
          --image docker.io/rancher/k3s:v1.25.4-k3s1 \
          --wait

          cat <<EOF > local_path_config.yaml
          kind: ConfigMap
          apiVersion: v1
          metadata:
            name: local-path-config
            namespace: kube-system
          data:
            config.json: |-
              {
                "nodePathMap":[
                {
                  "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                  "paths":["/var/lib/rancher/k3s/storage"]
                }
                ]
              }
            helperPod.yaml: |-
              apiVersion: v1
              kind: Pod
              metadata:
                name: helper-pod
              spec:
                containers:
                - name: helper-pod
                  image: rancher/mirrored-library-busybox:1.34.1
                  imagePullPolicy: IfNotPresent
            setup: |-
              #!/bin/sh
              while getopts "m:s:p:" opt
              do
                  case \$opt in
                      p)
                      absolutePath=\$OPTARG
                      ;;
                      s)
                      sizeInBytes=\$OPTARG
                      ;;
                      m)
                      volMode=\$OPTARG
                      ;;
                  esac
              done
              mkdir -m 2775 -p \${absolutePath}
              chmod 701 \${absolutePath}/..
            teardown: |-
              #!/bin/sh
              while getopts "m:s:p:" opt
              do
                  case \$opt in
                      p)
                      absolutePath=\$OPTARG
                      ;;
                      s)
                      sizeInBytes=\$OPTARG
                      ;;
                      m)
                      volMode=\$OPTARG
                      ;;
                  esac
              done
              rm -rf \${absolutePath}
          EOF
          kubectl apply -f local_path_config.yaml

      - name: test minio
        run: |
          export HELM_APP_NAME=minio
          export HELM_RELEASE_NAME=test
          
          export CYPRESS_VERSION=9.7.0
          cat charts/.vib/${HELM_APP_NAME}/vib-publish.json | jq -r .phases.verify.context.runtime_parameters | base64 -d > values_bitnami.yaml

          cat <<EOF > values_goss.yaml
          extraVolumes:
            - name: goss
              hostPath:
                path: /bin/goss
                type: File
            - name: goss-data
              hostPath:
                path: /goss_data
                type: Directory
          extraVolumeMounts:
            - name: goss
              mountPath: /bin/goss
              readOnly: true
            - name: goss-data
              mountPath: /goss_data
              readOnly: true
          EOF

          # generated by
          #   yq e '(.. | select(has("registry")) | pick(["registry","repository","tag","digest"])) as $i ireduce({}; setpath($i | path; $i))' values.yaml
          # and manually modified.
          # todo: use versioninfo.yaml

          cat <<EOF > values.yaml
          image:
            registry: ghcr.io
            repository: zcube/bitnami-compat/minio
            tag: 2022.12.7-debian-11
            digest: ""
          clientImage:
            registry: ghcr.io
            repository: zcube/bitnami-compat/minio-client
            tag: 2022.12.2-debian-11
            digest: ""
          volumePermissions:
            image:
              registry: ghcr.io
              repository: zcube/bitnami-compat/bitnami-shell
              tag: 11-debian-11
              digest: ""
          EOF

          helm upgrade -i ${HELM_RELEASE_NAME} bitnami/${HELM_APP_NAME} \
            -f values_bitnami.yaml \
            -f values_goss.yaml \
            -f values.yaml \
            --wait --timeout 300s

          cat <<EOF > svc.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${HELM_APP_NAME}
          spec:
            type: ExternalName
            externalName: ${HELM_RELEASE_NAME}-${HELM_APP_NAME}.default.svc.cluster.local
          EOF
          kubectl apply -f svc.yaml

          kubectl exec -n default $(kubectl get pod \
            -l=app.kubernetes.io/name=${HELM_APP_NAME} \
            -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
            -n default -o jsonpath='{.items[0].metadata.name}') \
            -- \
            goss -g /goss_data/${HELM_APP_NAME}/goss/goss.yaml --vars /goss_data/${HELM_APP_NAME}/goss/vars.yaml v

          # cypress v9 amd64 only
          docker run --privileged --rm tonistiigi/binfmt --install all
          docker run --rm --network host -v ${PWD}/charts/.vib/${HELM_APP_NAME}/cypress:/e2e -w /e2e cypress/included:${CYPRESS_VERSION}
          
          # pod logs
          kubectl logs -n default $(kubectl get pod \
            -l=app.kubernetes.io/name=${HELM_APP_NAME} \
            -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
            -n default -o jsonpath='{.items[0].metadata.name}')

          # pod describe
          kubectl describe pod -n default $(kubectl get pod \
            -l=app.kubernetes.io/name=${HELM_APP_NAME} \
            -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
            -n default -o jsonpath='{.items[0].metadata.name}')

          kubectl delete -f svc.yaml
          helm uninstall test

      - name: Cleanup k3d
        if: always()
        run: |
          k3d cluster stop test-cluster
          k3d cluster delete test-cluster
          docker run --privileged --rm tonistiigi/binfmt --uninstall all

