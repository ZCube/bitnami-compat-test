name: Chart Testing
on:
  push:
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        USE_IMAGE_TYPE: ["bitnami", "bitnami-compat"]
        APP_NAME: ["cert-manager", "consul", "contour", "contour-operator", "discourse", "elasticsearch", "etcd", "external-dns", "fluentd", "kafka", "keycloak", "mariadb", "mariadb-galera", "memcached", "minio", "mongodb", "mongodb-sharded", "mysql", "nginx", "node", "postgresql", "postgresql-ha", "rabbitmq", "rabbitmq-cluster-operator", "redis", "redis-cluster", "sealed-secrets", "solr", "thanos", "tomcat", "wordpress", "zookeeper", "apache"]
        # include:
        #   - os: ubuntu-latest
        #     USE_IMAGE_TYPE: "bitnami"
        #   - os: ubuntu-latest
        #     USE_IMAGE_TYPE: "bitnami-compat"
        #   # - os: [self-hosted, linux, ARM64]
        #   #   USE_IMAGE_TYPE: "bitnami-compat"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: uninstall qemu
        run: |
          docker run --privileged --rm tonistiigi/binfmt --uninstall all

      - name: clone bitnami charts
        run: |
          git clone --depth=1 https://github.com/bitnami/charts
          git clone --depth=1 https://github.com/zcube/bitnami-compat

      - name: install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          
          helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/$(dpkg --print-architecture)/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: install yq
        run: |
          export VERSION=v4.30.5
          export BINARY=yq_linux_$(dpkg --print-architecture)
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz
          sudo mv ${BINARY} /usr/local/bin/yq

      - name: install jq, binfmt-support
        run: |
          sudo apt update
          sudo apt install -y jq binfmt-support

      - name: install goss
        run: |
          export GOSS_VER=v0.3.20
          curl -fsSL https://goss.rocks/install | GOSS_DST=/usr/local/bin sudo sh

      - name: install k3d
        run: |
          wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.6 bash

      - name: prepare k3s cluster by k3d
        run: |
          k3d cluster stop test-cluster || true
          k3d cluster delete test-cluster || true
          k3d cluster create test-cluster \
          -p "80:80@agent:0:direct" \
          -p "443:443@agent:0:direct" \
          -p "8053:53/udp@agent:0:direct" \
          --agents 3 \
          --image docker.io/rancher/k3s:v1.25.4-k3s1 \
          --wait

          kubectl apply -f local_path_config.yaml

      - name: execute
        run: |
          export HELM_APP_NAME=${{ matrix.APP_NAME }}
          export HELM_RELEASE_NAME=test
          export USE_IMAGE_TYPE=${{ matrix.USE_IMAGE_TYPE }}

          cat charts/.vib/${HELM_APP_NAME}/vib-publish.json | jq -r .phases.verify.context.runtime_parameters | base64 -d > values_bitnami.yaml

          case "${USE_IMAGE_TYPE}" in
            bitnami) 
              helm upgrade -i ${HELM_RELEASE_NAME} bitnami/${HELM_APP_NAME} \
                -f values_bitnami.yaml \
                -f values_goss.yaml \
                --wait --timeout 300s
              ;;
            bitnami-compat) 
              helm upgrade -i ${HELM_RELEASE_NAME} bitnami/${HELM_APP_NAME} \
                -f values_bitnami.yaml \
                -f values_goss.yaml \
                --wait --timeout 300s
              ;;
          esac;

      - name: pull cypress
        if: always()
        run: |
          export CYPRESS_VERSION=9.7.0

          export HELM_APP_NAME=${{ matrix.APP_NAME }}
          export HELM_RELEASE_NAME=test
          export USE_IMAGE_TYPE=${{ matrix.USE_IMAGE_TYPE }}

          if [ -f ./charts/.vib/${HELM_APP_NAME}/cypress/cypress.json ]
          then
            # cypress v9 amd64 only
            dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";
            case "$dpkgArch" in
              amd64) 
                docker pull cypress/included:${CYPRESS_VERSION}
                ;;
              arm64) 
                # docker pull cypress/included:${CYPRESS_VERSION}
                ;;
            esac;
          fi

      - name: add externalname svc
        if: always()
        run: |
          export HELM_APP_NAME=${{ matrix.APP_NAME }}
          export HELM_RELEASE_NAME=test
          export USE_IMAGE_TYPE=${{ matrix.USE_IMAGE_TYPE }}

          cat <<EOF > svc.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${HELM_APP_NAME}
          spec:
            type: ExternalName
            externalName: ${HELM_RELEASE_NAME}-${HELM_APP_NAME}.default.svc.cluster.local
          EOF

          kubectl apply -f svc.yaml

      - name: dump pod info
        if: always()
        run: |
          export HELM_APP_NAME=${{ matrix.APP_NAME }}
          export HELM_RELEASE_NAME=test
          export USE_IMAGE_TYPE=${{ matrix.USE_IMAGE_TYPE }}

          # pod list
          kubectl get pods
          kubectl get svc
          kubectl get ingress
          kubectl get pv
          kubectl get pvc

          export GOSS_CONTAINER=$(kubectl get pods -n default \
            -l=app.kubernetes.io/name=${HELM_APP_NAME} \
            -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
            -o go-template='{{range $k,$v := .items}}{{ $v.metadata.name}}{{"\n"}}{{end}}' | grep "${HELM_RELEASE_NAME}-${HELM_APP_NAME}-" | head -n 1 )

          # pod logs
          kubectl logs -n default ${GOSS_CONTAINER}

          # pod describe
          kubectl describe pod -n default ${GOSS_CONTAINER}

      - name: test goss
        if: always()
        run: |
          export HELM_APP_NAME=${{ matrix.APP_NAME }}
          export HELM_RELEASE_NAME=test
          export USE_IMAGE_TYPE=${{ matrix.USE_IMAGE_TYPE }}
          
          export GOSS_CONTAINER=$(kubectl get pods -n default \
            -l=app.kubernetes.io/name=${HELM_APP_NAME} \
            -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
            -o go-template='{{range $k,$v := .items}}{{ $v.metadata.name}}{{"\n"}}{{end}}' | grep "${HELM_RELEASE_NAME}-${HELM_APP_NAME}-" | head -n 1 )

          if [ -f ./charts/.vib/${HELM_APP_NAME}/goss/goss.yaml ]
          then
            echo "================================================================"
            echo "${HELM_APP_NAME} goss"
            echo "================================================================"

            echo Testing with pod: $GOSS_CONTAINER
            
            # kubectl cp /usr/local/bin/goss $GOSS_CONTAINER:/tmp/goss
            # kubectl cp ./charts/.vib/${HELM_APP_NAME}/goss/goss.yaml $GOSS_CONTAINER:/tmp/goss.yaml
            # if [ -f ./charts/.vib/${HELM_APP_NAME}/goss/vars.yaml ]
            # then
            #   kubectl cp ./charts/.vib/${HELM_APP_NAME}/goss/vars.yaml $GOSS_CONTAINER:/tmp/vars.yaml
            # fi
            
            cat /usr/local/bin/goss | kubectl exec -i -n default $GOSS_CONTAINER "--" sh -c "cat > /tmp/goss"
            kubectl exec -i -n default $GOSS_CONTAINER "--" sh -c "chmod +x /tmp/goss"
            cat ./charts/.vib/${HELM_APP_NAME}/goss/goss.yaml | kubectl exec -i -n default $GOSS_CONTAINER "--" sh -c "cat > /tmp/goss.yaml"
            if [ -f ./charts/.vib/${HELM_APP_NAME}/goss/vars.yaml ]
            then
              cat ./charts/.vib/${HELM_APP_NAME}/goss/vars.yaml | kubectl exec -i -n default $GOSS_CONTAINER "--" sh -c "cat > /tmp/vars.yaml"
            fi

            if [ -f ./charts/.vib/${HELM_APP_NAME}/goss/vars.yaml ]
            then
            kubectl exec -n default $GOSS_CONTAINER \
              -- \
              /tmp/goss -g /tmp/goss.yaml --vars /tmp/vars.yaml v
            else
            kubectl exec -n default $GOSS_CONTAINER \
              -- \
              /tmp/goss -g /tmp/goss.yaml v
            fi
          fi

      - name: test cypress
        if: always()
        run: |
          export CYPRESS_VERSION=9.7.0

          export HELM_APP_NAME=${{ matrix.APP_NAME }}
          export HELM_RELEASE_NAME=test
          export USE_IMAGE_TYPE=${{ matrix.USE_IMAGE_TYPE }}
          
          export GOSS_CONTAINER=$(kubectl get pods -n default \
            -l=app.kubernetes.io/name=${HELM_APP_NAME} \
            -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
            -o go-template='{{range $k,$v := .items}}{{ $v.metadata.name}}{{"\n"}}{{end}}' | grep "${HELM_RELEASE_NAME}-${HELM_APP_NAME}-" | head -n 1 )

          if [ -f ./charts/.vib/${HELM_APP_NAME}/cypress/cypress.json ]
          then
            # cypress v9 amd64 only
            dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";
            case "$dpkgArch" in
              amd64) 
                echo "================================================================"
                echo "${HELM_APP_NAME} cypress"
                echo "================================================================"

                docker run --privileged --rm tonistiigi/binfmt --install all
                docker run --rm --network host -v ${PWD}/charts/.vib/${HELM_APP_NAME}/cypress:/e2e -w /e2e cypress/included:${CYPRESS_VERSION}
                ;;
              arm64) 
                # docker run --privileged --rm tonistiigi/binfmt --install all
                # docker run --rm --network host -v ${PWD}/charts/.vib/${HELM_APP_NAME}/cypress:/e2e -w /e2e cypress/included:${CYPRESS_VERSION}
                ;;
            esac;
          fi

      - name: Cleanup k3d
        if: always()
        run: |
          kubectl delete -f svc.yaml
          helm uninstall test \
            --wait --timeout 300s
          kubectl delete pvc --all 
          kubectl delete ingress --all 
          kubectl delete svc --all 

          k3d cluster stop test-cluster
          k3d cluster delete test-cluster
          docker run --privileged --rm tonistiigi/binfmt --uninstall all

