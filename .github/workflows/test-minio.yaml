name: Chart Testing
on:
  push:
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: [self-hosted, linux, ARM64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: uninstall qemu
        run: |
          docker run --privileged --rm tonistiigi/binfmt --uninstall all

      - name: clone bitnami charts
        run: |
          git clone --depth=1 https://github.com/bitnami/charts
          git clone --depth=1 https://github.com/zcube/bitnami-compat

      - name: install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          
          helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/$(dpkg --print-architecture)/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: install yq
        run: |
          export VERSION=v4.30.5
          export BINARY=yq_linux_$(dpkg --print-architecture)
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz
          mv ${BINARY} /usr/local/bin/yq

      - name: install jq, binfmt-support
        run: |
          sudo apt update
          sudo apt install -y jq binfmt-support

      - name: install goss
        run: |
          export GOSS_VER=v0.3.20
          curl -fsSL https://goss.rocks/install | GOSS_DST=/usr/local/bin sh

      - name: install k3d
        run: |
          wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.4.6 bash

      - name: prepare k3s cluster by k3d
        run: |
          k3d cluster stop test-cluster || true
          k3d cluster delete test-cluster || true
          k3d cluster create test-cluster \
          -v /usr/local/bin/goss:/bin/goss:ro \
          -v ${PWD}/charts/.vib:/goss_data \
          -p "80:80@agent:0:direct" \
          -p "443:443@agent:0:direct" \
          -p "8053:53/udp@agent:0:direct" \
          --agents 3 \
          --image docker.io/rancher/k3s:v1.25.4-k3s1 \
          --wait

          kubectl apply -f local_path_config.yaml

      - name: test minio
        run: |
          export HELM_RELEASE_NAME=test
          export CYPRESS_VERSION=9.7.0
          declare -a APP_NAMES=( "cert-manager" "consul" "contour" "contour-operator" "discourse" "elasticsearch" "etcd" "external-dns" "fluentd" "kafka" "keycloak" "mariadb" "mariadb-galera" "memcached" "minio" "mongodb" "mongodb-sharded" "mysql" "nginx" "node" "postgresql" "postgresql-ha" "rabbitmq" "rabbitmq-cluster-operator" "redis" "redis-cluster" "sealed-secrets" "solr" "thanos" "tomcat" "wordpress" "zookeeper" "apache" )

          set +e
          for HELM_APP_NAME in ${APP_NAMES[@]}; do
            cat charts/.vib/${HELM_APP_NAME}/vib-publish.json | jq -r .phases.verify.context.runtime_parameters | base64 -d > values_bitnami.yaml

            helm upgrade -i ${HELM_RELEASE_NAME} bitnami/${HELM_APP_NAME} \
              -f values_bitnami.yaml \
              -f values_goss.yaml \
              -f bitnami-compat/values/values_bitnami_compat_${HELM_APP_NAME}.yaml \
              --wait --timeout 300s

            cat <<EOF > svc.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: ${HELM_APP_NAME}
          spec:
            type: ExternalName
            externalName: ${HELM_RELEASE_NAME}-${HELM_APP_NAME}.default.svc.cluster.local
          EOF

            kubectl apply -f svc.yaml

            if [ -f ./charts/.vib/${HELM_APP_NAME}/goss/goss.yaml ]
            then
            
            echo "================================================================"
            echo "${HELM_APP_NAME} goss"
            echo "================================================================"

            if [ -f ./charts/.vib/${HELM_APP_NAME}/goss/vars.yaml ]
            then
            kubectl exec -n default $(kubectl get pod \
              -l=app.kubernetes.io/name=${HELM_APP_NAME} \
              -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
              -n default -o jsonpath='{.items[0].metadata.name}') \
              -- \
              goss -g /goss_data/${HELM_APP_NAME}/goss/goss.yaml --vars /goss_data/${HELM_APP_NAME}/goss/vars.yaml v
            else
            kubectl exec -n default $(kubectl get pod \
              -l=app.kubernetes.io/name=${HELM_APP_NAME} \
              -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
              -n default -o jsonpath='{.items[0].metadata.name}') \
              -- \
              goss -g /goss_data/${HELM_APP_NAME}/goss/goss.yaml v
            fi

            fi
            if [ -f ./charts/.vib/${HELM_APP_NAME}/cypress/cypress.json ]
            then

            # cypress v9 amd64 only
            dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";
            case "$dpkgArch" in
              amd64) 
                echo "================================================================"
                echo "${HELM_APP_NAME} cypress"
                echo "================================================================"

                docker run --privileged --rm tonistiigi/binfmt --install all
                docker run --rm --network host -v ${PWD}/charts/.vib/${HELM_APP_NAME}/cypress:/e2e -w /e2e cypress/included:${CYPRESS_VERSION}
                ;;
              arm64) 
                # docker run --privileged --rm tonistiigi/binfmt --install all
                # docker run --rm --network host -v ${PWD}/charts/.vib/${HELM_APP_NAME}/cypress:/e2e -w /e2e cypress/included:${CYPRESS_VERSION}
                ;;
            esac;

            fi

            # pod list
            kubectl get pods
            kubectl get svc
            kubectl get ingress
            kubectl get pv
            kubectl get pvc

            # pod logs
            kubectl logs -n default $(kubectl get pod \
              -l=app.kubernetes.io/name=${HELM_APP_NAME} \
              -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
              -n default -o jsonpath='{.items[0].metadata.name}')

            # pod describe
            kubectl describe pod -n default $(kubectl get pod \
              -l=app.kubernetes.io/name=${HELM_APP_NAME} \
              -l=app.kubernetes.io/instance=${HELM_RELEASE_NAME} \
              -n default -o jsonpath='{.items[0].metadata.name}')

            kubectl delete -f svc.yaml
            helm uninstall test \
              --wait --timeout 300s
            kubectl delete pvc --all 
            kubectl delete ingress --all 
            kubectl delete svc --all 
          done

          set -e

      - name: Cleanup k3d
        if: always()
        run: |
          k3d cluster stop test-cluster
          k3d cluster delete test-cluster
          docker run --privileged --rm tonistiigi/binfmt --uninstall all

